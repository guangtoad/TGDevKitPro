# -*- mode: python ; coding: utf-8 -*-
"""
PyInstaller specification file for cross-platform application.
This file is automatically generated and used by the build scripts.
"""

import sys
import os
from pathlib import Path

# Get project root directory
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config.app_config import AppConfig

# Initialize configuration
config = AppConfig()
build_info = config.get_build_info()

# Platform-specific settings
if sys.platform.startswith('win'):
    icon_file = str(config.RESOURCES_DIR / "icon.ico")
    console = build_info.get('console', False)
elif sys.platform == 'darwin':
    icon_file = str(config.RESOURCES_DIR / "icon.icns")
    console = False
else:
    icon_file = None
    console = True

# Data files to include
datas = [
    (str(config.RESOURCES_DIR), 'resources'),
    ('version.txt', '.'),
]

# Hidden imports (add modules that PyInstaller might miss)
hiddenimports = [
    'tkinter',
    'tkinter.ttk',
    'tkinter.filedialog',
    'tkinter.messagebox',
    'configparser',
    'pathlib',
    'logging',
    'argparse',
]

# Analysis block
block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[str(project_root)],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'numpy',
        'scipy',
        'pandas',
        'PyQt5',
        'PyQt6',
        'PySide2',
        'PySide6',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

# Remove unnecessary files to reduce size
a.binaries = [x for x in a.binaries if not x[0].startswith('api-ms-win-')]
a.binaries = [x for x in a.binaries if not x[0].startswith('ucrtbase')]

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

if build_info.get('onefile', True):
    # One file executable
    exe = EXE(
        pyz,
        a.scripts,
        a.binaries,
        a.zipfiles,
        a.datas,
        [],
        name=build_info['name'],
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        upx_exclude=[],
        runtime_tmpdir=None,
        console=console,
        disable_windowed_traceback=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon=icon_file,
        version_file=None,
    )
else:
    # Directory distribution
    exe = EXE(
        pyz,
        a.scripts,
        [],
        exclude_binaries=True,
        name=build_info['name'],
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        console=console,
        disable_windowed_traceback=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon=icon_file,
    )
    
    coll = COLLECT(
        exe,
        a.binaries,
        a.zipfiles,
        a.datas,
        strip=False,
        upx=True,
        upx_exclude=[],
        name=build_info['name'],
    )

# macOS app bundle
if sys.platform == 'darwin':
    app = BUNDLE(
        exe if build_info.get('onefile', True) else coll,
        name=f"{build_info['name']}.app",
        icon=icon_file,
        bundle_identifier=f"com.{config.AUTHOR.lower().replace(' ', '')}.{build_info['name'].lower()}",
        version=build_info['version'],
        info_plist={
            'NSPrincipalClass': 'NSApplication',
            'NSAppleScriptEnabled': False,
            'CFBundleDocumentTypes': [
                {
                    'CFBundleTypeName': 'All Files',
                    'CFBundleTypeOSTypes': ['****'],
                    'CFBundleTypeRole': 'Viewer'
                }
            ],
            'NSHighResolutionCapable': True,
            'LSMinimumSystemVersion': '10.13.0',
        },
    )
